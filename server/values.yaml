# Specifies the secret data for imagePullSecrets needed to fetch the private docker images
imageCredentials:
  create: true
  name: aqua-registry-secret # example
  repositoryUriPrefix: "registry.aquasec.com" # for dockerhub - "docker.io"
  registry: "registry.aquasec.com" #REQUIRED only if create is true, for dockerhub - "index.docker.io/v1/"
  username: ""
  password: ""

rbac:
  enabled: true
  privileged: true
  roleRef:

# enable only one of the modes
clustermode:
activeactive:

admin:
  token:
  password:

dockerSock:
  mount: # put true for mount docker socket.
  path: /var/run/docker.sock # pks - /var/vcap/data/sys/run/docker/docker.sock

vaultSecret:
  enabled: true   #enable this once you have secrets in vault and annotations are enabled

db:  
  external:
    enabled: false
    name:
    host:
    port:
    user:
    password:
    auditName:
    auditHost:
    auditPort:
    auditUser:
    auditPassword: true
    pubsubName:
    pubsubHost:
    pubsubPort:
    pubsubUser:
    pubsubPassword:
  #comment out the below annotations and args if you are not using separate vault for secrets
  annotations:
    vault:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-status: update
      vault.hashicorp.com/role: "aqua"                            # specify your role used by vault agent auto-auth
      vault.hashicorp.com/agent-inject-secret-aqua-secrets: aqua-v2/data/aqua-secrets  #specify your vault secrets path
  #Add the secrets in Key Value pair as environment variable
      vault.hashicorp.com/agent-inject-template-aqua-secrets: |        
        {{- with secret "aqua-v2/data/aqua-secrets" -}} 
        export POSTGRES_PASSWORD={{ .Data.data.aqua_db_password }}
        {{- end -}}
  vaultFilepath:
    /vault/secrets/aqua-secrets     # change the /vault/secrets/<filename> as per the setup 
  passwordSecret:
  dbPasswordName:
  dbPasswordKey:
  dbAuditPasswordName:
  dbAuditPasswordKey:
  dbPubsubPasswordName:
  dbPubsubPasswordKey:
  ssl: false
  auditssl: false
  image:
    repository: database
    tag: "5.3"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
  persistence:
    enabled: true
    storageClass:
    size: 30Gi
    accessMode: ReadWriteOnce
  livenessProbe:
    exec:
      command:
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 60
    timeoutSeconds: 5
    failureThreshold: 6
  readinessProbe:
    exec:
      command:
      - sh
      - -c
      - exec pg_isready --host $POD_IP
    initialDelaySeconds: 5
    timeoutSeconds: 3
    periodSeconds: 5
  resources: {}
    # Note: For recommendations please check the official sizing guide.
    # requests:
    #   cpu: 3000
    #   memory: 6Gi
    # limits:
    #   cpu: 12000
    #   memory: 20Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext: {}

  # extraEnvironmentVars is a list of extra environment variables to set in the database deployments.
  extraEnvironmentVars: {}
    # ENV_NAME: value

  # extraSecretEnvironmentVars is a list of extra environment variables to set in the database deployments.
  # These variables take value from existing Secret objects.
  extraSecretEnvironmentVars: []
    # - envName: ENV_NAME
    #   secretName: name
    #   secretKey: key

gate:
  replicaCount: 1
  logLevel:
  image:
    repository: gateway
    tag: "5.3"
    pullPolicy: IfNotPresent
  annotations:
    vault:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-status: update
      vault.hashicorp.com/role: "aqua"                            # specify your role used by vault agent auto-auth
      vault.hashicorp.com/agent-inject-secret-aqua-secrets: aqua-v2/data/aqua-secrets  #specify your vault secrets path
  #Add the secrets in Key Value pair as environment variable
      vault.hashicorp.com/agent-inject-template-aqua-secrets: |        
        {{- with secret "aqua-v2/data/aqua-secrets" -}} 
        export SCALOCK_DBPASSWORD={{ .Data.data.aqua_db_password }}
        export SCALOCK_AUDIT_DBPASSWORD={{ .Data.data.aqua_audit_db_password }}
        {{- end -}}
  vaultFilepath:
    /vault/secrets/aqua-secrets         # change the /vault/secrets/<filename> as per the setup
  service:
    type: ClusterIP
    annotations: {}
    ports:
      - name: aqua-gate
        port: 3622
        targetPort: 3622
        nodePort:
        protocol: TCP
      - name: aqua-gate-ssl
        port: 8443
        targetPort: 8443
        nodePort:
        protocol: TCP
      - name: aqua-health
        port: 8082
        protocol: TCP
        targetPort: 8082
        nodePort:
  publicIP:
  livenessProbe: {}
  readinessProbe: {}
  resources: {}
    # Note: For recommendations please check the official sizing guide.
    # requests:
    #   cpu: 1500
    #   memory: 7Gi
    # limits:
    #   cpu: 6000
    #   memory: 10Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext: {}
  #  runAsUser: 11431
  #  runAsGroup: 11433
  #  fsGroup: 11433

  # extraEnvironmentVars is a list of extra environment variables to set in the gateway deployments.
  # https://docs.aquasec.com/docs/gateway-optional-variables
  extraEnvironmentVars: {}
    # ENV_NAME: value

  # extraSecretEnvironmentVars is a list of extra environment variables to set in the gateway deployments.
  # These variables take value from existing Secret objects.
  extraSecretEnvironmentVars: []
    # - envName: ENV_NAME
    #   secretName: name
    #   secretKey: key

web:
  replicaCount: 1
  logLevel:
  image:
    repository: console
    tag: "5.3"
    pullPolicy: IfNotPresent
  annotations:
    vault:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-status: update
      vault.hashicorp.com/role: "aqua"                            # specify your role used by vault agent auto-auth
      vault.hashicorp.com/agent-inject-secret-aqua-secrets: aqua-v2/data/aqua-secrets  #specify your vault secrets path
  #Add the secrets in Key Value pair as environment variable
      vault.hashicorp.com/agent-inject-template-aqua-secrets: |        
        {{- with secret "aqua-v2/data/aqua-secrets" -}} 
        export SCALOCK_DBPASSWORD={{ .Data.data.aqua_db_password }}
        export SCALOCK_AUDIT_DBPASSWORD={{ .Data.data.aqua_audit_db_password }}
        export AQUA_PUBSUB_DBPASSWORD={{ .Data.data.aqua_pubsub_db_password }}
        export LICENSE_TOKEN={{ .Data.data.aqua_license_token }}
        export ADMIN_PASSWORD={{ .Data.data.aqua_admin_password }}
        {{- end -}}
  vaultFilepath:
    /vault/secrets/aqua-secrets              # change the /vault/secrets/<filename> as per the setup        
  service:
    type: LoadBalancer
    annotations: {}
    ports:
      - name: aqua-web
        port: 8080
        targetPort: 8080
        nodePort:
        protocol: TCP
      - name: aqua-web-ssl
        port: 443
        targetPort: 8443
        nodePort:
        protocol: TCP
  ingress:
    enabled: false
    annotations: {}
    #  kubernetes.io/ingress.class: nginx
    hosts: #REQUIRED
    #- aquasec-test.example.com
    tls: []
    #  - secretName: aquasec-tls
    #    hosts:
    #      - aquasec.domain.com

  # Note: Please change the ports according to the requirement.
  # default liveness and readiness probe
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30

  readinessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 60
    periodSeconds: 30

  resources: {}
    # Note: For recommendations please check the official sizing guide.
    # requests:
    #   cpu: 2000
    #   memory: 3Gi
    # limits:
    #   cpu: 6000
    #   memory: 10Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext: {}
  #  runAsUser: 11431
  #  runAsGroup: 11433
  #  fsGroup: 11433

  # extraEnvironmentVars is a list of extra environment variables to set in the web deployments.
  # https://docs.aquasec.com/docs/server-optional-variables
  extraEnvironmentVars: {}
    # ENV_NAME: value

  # extraSecretEnvironmentVars is a list of extra environment variables to set in the web deployments.
  # These variables take value from existing Secret objects.
  extraSecretEnvironmentVars: []
    # - envName: ENV_NAME
    #   secretName: name
    #   secretKey: key

envoy:
  enabled: false
  replicaCount: 1

  image:
    repository: envoyproxy/envoy-alpine
    tag: v1.15.0
    pullPolicy: IfNotPresent

  service:
    type: LoadBalancer
    annotations: {}
    ports:
    - name: healthserver
      port: 8082
      targetPort: 8082
      nodePort:
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8443
      nodePort:
      protocol: TCP

  certsSecretName:

  livenessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: x-envoy-livenessprobe
        value: healthz
      path: /healthz
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    httpGet:
      httpHeaders:
      - name: x-envoy-livenessprobe
        value: healthz
      path: /healthz
      port: 8443
      scheme: HTTPS
    initialDelaySeconds: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  resources: {}
    # Note: For recommendations please check the official sizing guide.
    # requests:
    #   cpu: 2000
    #   memory: 4Gi
    # limits:
    #   cpu: 4000
    #   memory: 10Gi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  securityContext: {}

  files:
    ## refs:
    ## - https://www.envoyproxy.io/docs/envoy/latest/start/start#quick-start-to-run-simple-example
    ## - https://raw.githubusercontent.com/envoyproxy/envoy/master/configs/google_com_proxy.v2.yaml
    envoy.yaml: |
      static_resources:
        listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 8443
          filter_chains:
          - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stream_idle_timeout: 0s
                drain_timeout: 20s
                access_log:
                - name: envoy.access_loggers.file
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: "/dev/stdout"
                codec_type: AUTO
                stat_prefix: ingress_https
                route_config:
                  name: local_route
                  virtual_hosts:
                  - name: https
                    domains:
                    - "*"
                    routes:
                    - match:
                        prefix: "/"
                      route:
                        cluster: aqua-gateway-svc
                        timeout: 0s
                http_filters:
                - name: envoy.filters.http.health_check
                  typed_config:
                    "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
                    pass_through_mode: false
                    headers:
                    - name: ":path"
                      exact_match: "/healthz"
                    - name: "x-envoy-livenessprobe"
                      exact_match: "healthz"
                - name: envoy.filters.http.router
                  typed_config: {}
            transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
                common_tls_context:
                  alpn_protocols: "h2,http/1.1"
                  tls_certificates:
                  - certificate_chain:
                      filename: "/etc/ssl/envoy/tls.crt"
                    private_key:
                      filename: "/etc/ssl/envoy/tls.key"
        clusters:
        - name: aqua-gateway-svc
          connect_timeout: 180s
          type: STRICT_DNS
          dns_lookup_family: V4_ONLY
          lb_policy: ROUND_ROBIN
          http2_protocol_options:
            hpack_table_size: 4294967
            max_concurrent_streams: 2147483647
          circuit_breakers:
              thresholds:
                  max_pending_requests: 2147483647
                  max_requests: 2147483647
          load_assignment:
            cluster_name: aqua-gateway-svc
            endpoints:
            - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: {{ .Release.Name }}-gateway-headless-svc.{{ .Release.Namespace }}.svc.cluster.local
                      port_value: 8443
          transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                  "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
                  sni: aqua-gateway-svc
      admin:
        access_log_path: "/dev/stdout"
        address:
          socket_address:
            address: 127.0.0.1
            port_value: 8090
